version: '3.9'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: discord-bot-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: discord-bot-dashboard
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - discord-bot-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/discord-bot-dashboard --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: discord-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - discord-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Discord Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: discord-bot
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - discord-bot-network
    volumes:
      - ./bot/src:/app/src
      - ./bot/logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: discord-bot-api
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - discord-bot-network
    volumes:
      - ./api/src:/app/src
      - ./api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: discord-bot-frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5173:5173"
    depends_on:
      - api
    networks:
      - discord-bot-network
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: discord-bot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - discord-bot-network
    profiles:
      - production

networks:
  discord-bot-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
