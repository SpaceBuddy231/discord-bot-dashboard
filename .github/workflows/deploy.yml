name: Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build all modules
        run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/discord-bot
            ${{ secrets.DOCKER_USERNAME }}/discord-bot-api
            ${{ secrets.DOCKER_USERNAME }}/discord-bot-frontend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Bot
        uses: docker/build-push-action@v5
        with:
          context: ./bot
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/discord-bot:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot:buildcache,mode=max
      
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/discord-bot-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot-api:buildcache,mode=max
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/discord-bot-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/discord-bot-frontend:buildcache,mode=max
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/discord-bot-dashboard
            docker-compose pull
            docker-compose up -d
            docker system prune -af
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            CHANGELOG.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Discord
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Deployment"
          description: "Deployment to production ${{ job.status }}"
